// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

{% if strings %}
import Foundation

// swiftlint:disable file_length
// swiftlint:disable line_length
{% macro recursiveBlock strings %}
  {% for string in strings.strings %}
  /// {{string.translation}}
  case {{string.key|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}{% if string.params %}({{string.params.types|join}}){% endif %}
  {% endfor %}
  {% for subenum in strings.subenums %}
  {% call recursiveBlock subenum %}
  {% endfor %}
{% endmacro %}

// swiftlint:disable type_body_length
enum {{enumName}} {
  {% call recursiveBlock structuredStrings %}
}
// swiftlint:enable type_body_length

{% macro parametersBlock params %}{% for type in params.types %}let p{{forloop.counter}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro argumentsBlock params %}{% for type in params.types %}p{{forloop.counter}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro recursiveBlock strings %}
      {% for string in strings.strings %}
      {% if string.params %}
      case .{{string.key|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}({% call parametersBlock string.params %}):
        return {{enumName}}.tr("{{string.key}}", {% call argumentsBlock string.params %})
      {% else %}
      case .{{string.key|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}:
        return {{enumName}}.tr("{{string.key}}")
      {% endif %}
      {% endfor %}
      {% for subenum in strings.subenums %}
      {% call recursiveBlock subenum %}
      {% endfor %}
{% endmacro %}
extension {{enumName}}: CustomStringConvertible {
  var description: String { return self.string }

  var string: String {
    switch self {
      {% call recursiveBlock structuredStrings %}
    }
  }

  private static func tr(key: String, _ args: CVarArgType...) -> String {
    let format = NSLocalizedString(key, bundle: NSBundle(forClass: BundleToken.self), comment: "")
    return String(format: format, locale: NSLocale.currentLocale(), arguments: args)
  }
}

func tr(key: {{enumName}}) -> String {
  return key.string
}

private final class BundleToken {}
{% else %}
// No string found
{% endif %}
